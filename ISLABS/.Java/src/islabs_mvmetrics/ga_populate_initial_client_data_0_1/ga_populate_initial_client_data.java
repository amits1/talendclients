// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package islabs_mvmetrics.ga_populate_initial_client_data_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.islabs_ga_common;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: ga_populate_initial_client_data Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class ga_populate_initial_client_data implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (DB_HOST != null) {

				this.setProperty("DB_HOST", DB_HOST.toString());

			}

			if (DB_PORT != null) {

				this.setProperty("DB_PORT", DB_PORT.toString());

			}

			if (DB_SCHEMA != null) {

				this.setProperty("DB_SCHEMA", DB_SCHEMA.toString());

			}

			if (DB_USERNAME != null) {

				this.setProperty("DB_USERNAME", DB_USERNAME.toString());

			}

			if (DB_PASSWORD != null) {

				this.setProperty("DB_PASSWORD", DB_PASSWORD.toString());

			}

			if (DB_DBNAME != null) {

				this.setProperty("DB_DBNAME", DB_DBNAME.toString());

			}

			if (LOG_DIR_PATH != null) {

				this.setProperty("LOG_DIR_PATH", LOG_DIR_PATH.toString());

			}

			if (CURRENT_DATE != null) {

				this.setProperty("CURRENT_DATE", CURRENT_DATE.toString());

			}

			if (START_DATE != null) {

				this.setProperty("START_DATE", START_DATE.toString());

			}

			if (END_DATE != null) {

				this.setProperty("END_DATE", END_DATE.toString());

			}

			if (LAST_N_DAYS != null) {

				this.setProperty("LAST_N_DAYS", LAST_N_DAYS.toString());

			}

			if (SERVICE_ACCOUNT != null) {

				this.setProperty("SERVICE_ACCOUNT", SERVICE_ACCOUNT.toString());

			}

			if (KEY_FILE != null) {

				this.setProperty("KEY_FILE", KEY_FILE.toString());

			}

			if (PROFILE_ID != null) {

				this.setProperty("PROFILE_ID", PROFILE_ID.toString());

			}

			if (JOB_ID != null) {

				this.setProperty("JOB_ID", JOB_ID.toString());

			}

			if (GAPROFILE != null) {

				this.setProperty("GAPROFILE", GAPROFILE.toString());

			}

			if (SMTP_PORT != null) {

				this.setProperty("SMTP_PORT", SMTP_PORT.toString());

			}

			if (SMTP_PASSWORD != null) {

				this.setProperty("SMTP_PASSWORD", SMTP_PASSWORD.toString());

			}

			if (SMTP_USERNAME != null) {

				this.setProperty("SMTP_USERNAME", SMTP_USERNAME.toString());

			}

			if (SMTP_SERVER != null) {

				this.setProperty("SMTP_SERVER", SMTP_SERVER.toString());

			}

		}

		public String DB_HOST;

		public String getDB_HOST() {
			return this.DB_HOST;
		}

		public String DB_PORT;

		public String getDB_PORT() {
			return this.DB_PORT;
		}

		public String DB_SCHEMA;

		public String getDB_SCHEMA() {
			return this.DB_SCHEMA;
		}

		public String DB_USERNAME;

		public String getDB_USERNAME() {
			return this.DB_USERNAME;
		}

		public String DB_PASSWORD;

		public String getDB_PASSWORD() {
			return this.DB_PASSWORD;
		}

		public String DB_DBNAME;

		public String getDB_DBNAME() {
			return this.DB_DBNAME;
		}

		public String LOG_DIR_PATH;

		public String getLOG_DIR_PATH() {
			return this.LOG_DIR_PATH;
		}

		public String CURRENT_DATE;

		public String getCURRENT_DATE() {
			return this.CURRENT_DATE;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public Integer LAST_N_DAYS;

		public Integer getLAST_N_DAYS() {
			return this.LAST_N_DAYS;
		}

		public String SERVICE_ACCOUNT;

		public String getSERVICE_ACCOUNT() {
			return this.SERVICE_ACCOUNT;
		}

		public String KEY_FILE;

		public String getKEY_FILE() {
			return this.KEY_FILE;
		}

		public Integer PROFILE_ID;

		public Integer getPROFILE_ID() {
			return this.PROFILE_ID;
		}

		public Integer JOB_ID;

		public Integer getJOB_ID() {
			return this.JOB_ID;
		}

		public Integer GAPROFILE;

		public Integer getGAPROFILE() {
			return this.GAPROFILE;
		}

		public String SMTP_PORT;

		public String getSMTP_PORT() {
			return this.SMTP_PORT;
		}

		public String SMTP_PASSWORD;

		public String getSMTP_PASSWORD() {
			return this.SMTP_PASSWORD;
		}

		public String SMTP_USERNAME;

		public String getSMTP_USERNAME() {
			return this.SMTP_USERNAME;
		}

		public String SMTP_SERVER;

		public String getSMTP_SERVER() {
			return this.SMTP_SERVER;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ga_populate_initial_client_data";
	private final String projectName = "ISLABS_MVMETRICS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ga_populate_initial_client_data.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ga_populate_initial_client_data.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tMysqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

		status = "failure";

		tMysqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tGoogleAnalyticsInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tGoogleAnalyticsInput_1", System.currentTimeMillis());

		tGoogleAnalyticsInput_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		tGoogleAnalyticsInput_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMysqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

		tGoogleAnalyticsInput_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMysqlRollback_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlRollback_1", System.currentTimeMillis());

		status = "failure";

		tMysqlRollback_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlRow_3", System.currentTimeMillis());

		status = "failure";

		tMysqlRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlRow_1", System.currentTimeMillis());

		status = "failure";

		tMysqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

		status = "failure";

		tMysqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_1", System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlRow_2", System.currentTimeMillis());

		status = "failure";

		tMysqlRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlCommit_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());

		status = "failure";

		tMysqlCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPrejob_1", System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tGoogleAnalyticsInput_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tMysqlRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
	}

	public void tMysqlRollback_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlCommit_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlCommit_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlConnection_1 begin ] start
				 */

				ok_Hash.put("tMysqlConnection_1", false);
				start_Hash
						.put("tMysqlConnection_1", System.currentTimeMillis());
				currentComponent = "tMysqlConnection_1";

				int tos_count_tMysqlConnection_1 = 0;

				String properties_tMysqlConnection_1 = "noDatetimeStringSync=true";
				if (properties_tMysqlConnection_1 == null
						|| properties_tMysqlConnection_1.trim().length() == 0) {
					properties_tMysqlConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tMysqlConnection_1 != null
						&& !properties_tMysqlConnection_1
								.contains("rewriteBatchedStatements")) {
					properties_tMysqlConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tMysqlConnection_1 = "jdbc:mysql://"
						+ context.DB_HOST + ":" + context.DB_PORT + "/"
						+ context.DB_DBNAME + "?"
						+ properties_tMysqlConnection_1;

				String userName_tMysqlConnection_1 = context.DB_USERNAME;
				String password_tMysqlConnection_1 = context.DB_PASSWORD;

				java.sql.Connection conn_tMysqlConnection_1 = null;

				String sharedConnectionName_tMysqlConnection_1 = "SHARED_DB";
				conn_tMysqlConnection_1 = SharedDBConnection.getDBConnection(
						"org.gjt.mm.mysql.Driver", url_tMysqlConnection_1,
						userName_tMysqlConnection_1,
						password_tMysqlConnection_1,
						sharedConnectionName_tMysqlConnection_1);
				if (null != conn_tMysqlConnection_1) {

					conn_tMysqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tMysqlConnection_1",
						conn_tMysqlConnection_1);

				globalMap.put("db_tMysqlConnection_1", context.DB_DBNAME);

				/**
				 * [tMysqlConnection_1 begin ] stop
				 */
				/**
				 * [tMysqlConnection_1 main ] start
				 */

				currentComponent = "tMysqlConnection_1";

				tos_count_tMysqlConnection_1++;

				/**
				 * [tMysqlConnection_1 main ] stop
				 */
				/**
				 * [tMysqlConnection_1 end ] start
				 */

				currentComponent = "tMysqlConnection_1";

				ok_Hash.put("tMysqlConnection_1", true);
				end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

				/**
				 * [tMysqlConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tMysqlConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tGoogleAnalyticsInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class outStruct implements
			routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[0];
		static byte[] commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int profileid;

		public int getProfileid() {
			return this.profileid;
		}

		public String visitorType;

		public String getVisitorType() {
			return this.visitorType;
		}

		public String isMobile;

		public String getIsMobile() {
			return this.isMobile;
		}

		public String medium;

		public String getMedium() {
			return this.medium;
		}

		public String medium_1;

		public String getMedium_1() {
			return this.medium_1;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer visits;

		public Integer getVisits() {
			return this.visits;
		}

		public Integer visitors;

		public Integer getVisitors() {
			return this.visitors;
		}

		public Integer goalCompletionsAll;

		public Integer getGoalCompletionsAll() {
			return this.goalCompletionsAll;
		}

		public Float goalConversionRateAll;

		public Float getGoalConversionRateAll() {
			return this.goalConversionRateAll;
		}

		public Float visitBounceRate;

		public Float getVisitBounceRate() {
			return this.visitBounceRate;
		}

		public Integer avgTimeOnSite;

		public Integer getAvgTimeOnSite() {
			return this.avgTimeOnSite;
		}

		public Integer pageviewsPerVisit;

		public Integer getPageviewsPerVisit() {
			return this.pageviewsPerVisit;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.profileid;

				result = prime * result
						+ ((this.date == null) ? 0 : this.date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outStruct other = (outStruct) obj;

			if (this.profileid != other.profileid)
				return false;

			if (this.date == null) {
				if (other.date != null)
					return false;
			} else if (!this.date.equals(other.date))
				return false;

			return true;
		}

		public void copyDataTo(outStruct other) {

			other.profileid = this.profileid;
			other.visitorType = this.visitorType;
			other.isMobile = this.isMobile;
			other.medium = this.medium;
			other.medium_1 = this.medium_1;
			other.source = this.source;
			other.date = this.date;
			other.visits = this.visits;
			other.visitors = this.visitors;
			other.goalCompletionsAll = this.goalCompletionsAll;
			other.goalConversionRateAll = this.goalConversionRateAll;
			other.visitBounceRate = this.visitBounceRate;
			other.avgTimeOnSite = this.avgTimeOnSite;
			other.pageviewsPerVisit = this.pageviewsPerVisit;

		}

		public void copyKeysDataTo(outStruct other) {

			other.profileid = this.profileid;
			other.date = this.date;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data.length) {
					if (length < 1024
							&& commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data.length == 0) {
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[1024];
					} else {
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data,
						0, length);
				strReturn = new String(
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ISLABS_MVMETRICS_ga_populate_initial_client_data) {

				try {

					int length = 0;

					this.profileid = dis.readInt();

					this.visitorType = readString(dis);

					this.isMobile = readString(dis);

					this.medium = readString(dis);

					this.medium_1 = readString(dis);

					this.source = readString(dis);

					this.date = readDate(dis);

					this.visits = readInteger(dis);

					this.visitors = readInteger(dis);

					this.goalCompletionsAll = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.goalConversionRateAll = null;
					} else {
						this.goalConversionRateAll = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.visitBounceRate = null;
					} else {
						this.visitBounceRate = dis.readFloat();
					}

					this.avgTimeOnSite = readInteger(dis);

					this.pageviewsPerVisit = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.profileid);

				// String

				writeString(this.visitorType, dos);

				// String

				writeString(this.isMobile, dos);

				// String

				writeString(this.medium, dos);

				// String

				writeString(this.medium_1, dos);

				// String

				writeString(this.source, dos);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.visits, dos);

				// Integer

				writeInteger(this.visitors, dos);

				// Integer

				writeInteger(this.goalCompletionsAll, dos);

				// Float

				if (this.goalConversionRateAll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.goalConversionRateAll);
				}

				// Float

				if (this.visitBounceRate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.visitBounceRate);
				}

				// Integer

				writeInteger(this.avgTimeOnSite, dos);

				// Integer

				writeInteger(this.pageviewsPerVisit, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("profileid=" + String.valueOf(profileid));
			sb.append(",visitorType=" + visitorType);
			sb.append(",isMobile=" + isMobile);
			sb.append(",medium=" + medium);
			sb.append(",medium_1=" + medium_1);
			sb.append(",source=" + source);
			sb.append(",date=" + String.valueOf(date));
			sb.append(",visits=" + String.valueOf(visits));
			sb.append(",visitors=" + String.valueOf(visitors));
			sb.append(",goalCompletionsAll="
					+ String.valueOf(goalCompletionsAll));
			sb.append(",goalConversionRateAll="
					+ String.valueOf(goalConversionRateAll));
			sb.append(",visitBounceRate=" + String.valueOf(visitBounceRate));
			sb.append(",avgTimeOnSite=" + String.valueOf(avgTimeOnSite));
			sb.append(",pageviewsPerVisit=" + String.valueOf(pageviewsPerVisit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.profileid, other.profileid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.date, other.date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[0];
		static byte[] commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[0];

		public String visitorType;

		public String getVisitorType() {
			return this.visitorType;
		}

		public String isMobile;

		public String getIsMobile() {
			return this.isMobile;
		}

		public String medium;

		public String getMedium() {
			return this.medium;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public Integer visits;

		public Integer getVisits() {
			return this.visits;
		}

		public Integer visitors;

		public Integer getVisitors() {
			return this.visitors;
		}

		public Integer goalCompletionsAll;

		public Integer getGoalCompletionsAll() {
			return this.goalCompletionsAll;
		}

		public Float goalConversionRateAll;

		public Float getGoalConversionRateAll() {
			return this.goalConversionRateAll;
		}

		public Float visitBounceRate;

		public Float getVisitBounceRate() {
			return this.visitBounceRate;
		}

		public Integer avgTimeOnSite;

		public Integer getAvgTimeOnSite() {
			return this.avgTimeOnSite;
		}

		public Integer pageviewsPerVisit;

		public Integer getPageviewsPerVisit() {
			return this.pageviewsPerVisit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data.length) {
					if (length < 1024
							&& commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data.length == 0) {
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[1024];
					} else {
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data,
						0, length);
				strReturn = new String(
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ISLABS_MVMETRICS_ga_populate_initial_client_data) {

				try {

					int length = 0;

					this.visitorType = readString(dis);

					this.isMobile = readString(dis);

					this.medium = readString(dis);

					this.source = readString(dis);

					this.date = readString(dis);

					this.visits = readInteger(dis);

					this.visitors = readInteger(dis);

					this.goalCompletionsAll = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.goalConversionRateAll = null;
					} else {
						this.goalConversionRateAll = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.visitBounceRate = null;
					} else {
						this.visitBounceRate = dis.readFloat();
					}

					this.avgTimeOnSite = readInteger(dis);

					this.pageviewsPerVisit = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.visitorType, dos);

				// String

				writeString(this.isMobile, dos);

				// String

				writeString(this.medium, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.date, dos);

				// Integer

				writeInteger(this.visits, dos);

				// Integer

				writeInteger(this.visitors, dos);

				// Integer

				writeInteger(this.goalCompletionsAll, dos);

				// Float

				if (this.goalConversionRateAll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.goalConversionRateAll);
				}

				// Float

				if (this.visitBounceRate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.visitBounceRate);
				}

				// Integer

				writeInteger(this.avgTimeOnSite, dos);

				// Integer

				writeInteger(this.pageviewsPerVisit, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("visitorType=" + visitorType);
			sb.append(",isMobile=" + isMobile);
			sb.append(",medium=" + medium);
			sb.append(",source=" + source);
			sb.append(",date=" + date);
			sb.append(",visits=" + String.valueOf(visits));
			sb.append(",visitors=" + String.valueOf(visitors));
			sb.append(",goalCompletionsAll="
					+ String.valueOf(goalCompletionsAll));
			sb.append(",goalConversionRateAll="
					+ String.valueOf(goalConversionRateAll));
			sb.append(",visitBounceRate=" + String.valueOf(visitBounceRate));
			sb.append(",avgTimeOnSite=" + String.valueOf(avgTimeOnSite));
			sb.append(",pageviewsPerVisit=" + String.valueOf(pageviewsPerVisit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tGoogleAnalyticsInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tGoogleAnalyticsInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				outStruct out = new outStruct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "clientdata_ga_raw";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				conn_tMysqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");
				if (null == conn_tMysqlOutput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tMysqlOutput_1 = dataSources_tMysqlOutput_1.get("")
							.getConnection();
				}

				int count_tMysqlOutput_1 = 0;

				String insert_tMysqlOutput_1 = "INSERT INTO `"
						+ "clientdata_ga_raw"
						+ "` (`profileid`,`visitorType`,`isMobile`,`medium`,`medium_1`,`source`,`date`,`visits`,`visitors`,`goalCompletionsAll`,`goalConversionRateAll`,`visitBounceRate`,`avgTimeOnSite`,`pageviewsPerVisit`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_1 = 100;
				int batchSizeCounter_tMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					String medium;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outStruct out_tmp = new outStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tGoogleAnalyticsInput_1 begin ] start
				 */

				ok_Hash.put("tGoogleAnalyticsInput_1", false);
				start_Hash.put("tGoogleAnalyticsInput_1",
						System.currentTimeMillis());
				currentComponent = "tGoogleAnalyticsInput_1";

				int tos_count_tGoogleAnalyticsInput_1 = 0;
				// start creating client
				de.cimt.talendcomp.googleanalytics.GoogleAnalyticsInput tGoogleAnalyticsInput_1 = de.cimt.talendcomp.googleanalytics.GoogleAnalyticsInput
						.getFromCache(context.SERVICE_ACCOUNT + ""
								+ "tGoogleAnalyticsInput_1" + jobName);
				if (tGoogleAnalyticsInput_1 == null) {
					tGoogleAnalyticsInput_1 = new de.cimt.talendcomp.googleanalytics.GoogleAnalyticsInput();
					tGoogleAnalyticsInput_1
							.setApplicationName("Fetch Analytics");
					// setup credentials
					tGoogleAnalyticsInput_1
							.setAccountEmail(context.SERVICE_ACCOUNT);
					tGoogleAnalyticsInput_1.setKeyFile(context.KEY_FILE);
					tGoogleAnalyticsInput_1.setTimeoutInSeconds(240);
					tGoogleAnalyticsInput_1.setTimeOffsetMillisToPast(10000);
					tGoogleAnalyticsInput_1.setFetchSize(10000);
					tGoogleAnalyticsInput_1.deliverTotalsDataset(false);
					try {
						// initialize client with private key
						tGoogleAnalyticsInput_1.initializeAnalyticsClient();
					} catch (Exception e) {
						globalMap.put("tGoogleAnalyticsInput_1_ERROR_MESSAGE",
								e.getMessage());
						throw e;
					}
					globalMap.put("tGoogleAnalyticsInput_1",
							tGoogleAnalyticsInput_1);
					de.cimt.talendcomp.googleanalytics.GoogleAnalyticsInput
							.putIntoCache(context.SERVICE_ACCOUNT + ""
									+ "tGoogleAnalyticsInput_1" + jobName,
									tGoogleAnalyticsInput_1);
				}
				// setup query
				tGoogleAnalyticsInput_1.setProfileId(context.GAPROFILE);
				tGoogleAnalyticsInput_1.setStartDate(context.START_DATE);
				// for selecting data for one day, set end date == start date
				tGoogleAnalyticsInput_1.setEndDate(context.END_DATE);
				tGoogleAnalyticsInput_1
						.setDimensions("ga:visitorType,ga:isMobile,ga:medium,ga:source,ga:date");
				tGoogleAnalyticsInput_1
						.setMetrics("ga:visits,ga:visitors,ga:goalCompletionsAll,ga:goalConversionRateAll,ga:visitBounceRate,ga:avgTimeOnSite,ga:pageviewsPerVisit");
				tGoogleAnalyticsInput_1.setSorts("ga:date");
				// fire query and fetch first chunk of data
				try {
					// checks also the correctness of result columns
					tGoogleAnalyticsInput_1.executeQuery();
				} catch (Exception e) {
					globalMap.put("tGoogleAnalyticsInput_1_ERROR_MESSAGE",
							e.getMessage());
					throw e;
				}
				// iterate through the data...
				int countLines_tGoogleAnalyticsInput_1 = 0;
				while (true) {
					try {
						// hasNextDataset() executes a new query if needed
						if (tGoogleAnalyticsInput_1.hasNextDataset() == false) {
							break;
						}
					} catch (Exception e) {
						globalMap.put("tGoogleAnalyticsInput_1_ERROR_MESSAGE",
								e.getMessage());
						throw e;
					}
					// next row from results
					java.util.List<String> dataset_tGoogleAnalyticsInput_1 = tGoogleAnalyticsInput_1
							.getNextDataset();
					// create a new row, thats avoid the need of setting
					// attributes to null
					row1 = new row1Struct();
					// fill schema field visitorType
					String tGoogleAnalyticsInput_1_value_0 = dataset_tGoogleAnalyticsInput_1
							.get(0);
					if (tGoogleAnalyticsInput_1_value_0 != null) {
						row1.visitorType = tGoogleAnalyticsInput_1_value_0;
					}
					// fill schema field isMobile
					String tGoogleAnalyticsInput_1_value_1 = dataset_tGoogleAnalyticsInput_1
							.get(1);
					if (tGoogleAnalyticsInput_1_value_1 != null) {
						row1.isMobile = tGoogleAnalyticsInput_1_value_1;
					}
					// fill schema field medium
					String tGoogleAnalyticsInput_1_value_2 = dataset_tGoogleAnalyticsInput_1
							.get(2);
					if (tGoogleAnalyticsInput_1_value_2 != null) {
						row1.medium = tGoogleAnalyticsInput_1_value_2;
					}
					// fill schema field source
					String tGoogleAnalyticsInput_1_value_3 = dataset_tGoogleAnalyticsInput_1
							.get(3);
					if (tGoogleAnalyticsInput_1_value_3 != null) {
						row1.source = tGoogleAnalyticsInput_1_value_3;
					}
					// fill schema field date
					String tGoogleAnalyticsInput_1_value_4 = dataset_tGoogleAnalyticsInput_1
							.get(4);
					if (tGoogleAnalyticsInput_1_value_4 != null) {
						row1.date = tGoogleAnalyticsInput_1_value_4;
					}
					// fill schema field visits
					String tGoogleAnalyticsInput_1_value_5 = dataset_tGoogleAnalyticsInput_1
							.get(5);
					if (tGoogleAnalyticsInput_1_value_5 != null) {
						try {
							row1.visits = (java.lang.Integer) de.cimt.talendcomp.googleanalytics.Util
									.convertToDatatype(
											tGoogleAnalyticsInput_1_value_5,
											"Integer", "en");
						} catch (Exception e) {
							throw new Exception(
									"Convert field: row1.visits value=["
											+ tGoogleAnalyticsInput_1_value_5
											+ "] countLines="
											+ countLines_tGoogleAnalyticsInput_1
											+ " failed:" + e.getMessage(), e);
						}
					}
					// fill schema field visitors
					String tGoogleAnalyticsInput_1_value_6 = dataset_tGoogleAnalyticsInput_1
							.get(6);
					if (tGoogleAnalyticsInput_1_value_6 != null) {
						try {
							row1.visitors = (java.lang.Integer) de.cimt.talendcomp.googleanalytics.Util
									.convertToDatatype(
											tGoogleAnalyticsInput_1_value_6,
											"Integer", "en");
						} catch (Exception e) {
							throw new Exception(
									"Convert field: row1.visitors value=["
											+ tGoogleAnalyticsInput_1_value_6
											+ "] countLines="
											+ countLines_tGoogleAnalyticsInput_1
											+ " failed:" + e.getMessage(), e);
						}
					}
					// fill schema field goalCompletionsAll
					String tGoogleAnalyticsInput_1_value_7 = dataset_tGoogleAnalyticsInput_1
							.get(7);
					if (tGoogleAnalyticsInput_1_value_7 != null) {
						try {
							row1.goalCompletionsAll = (java.lang.Integer) de.cimt.talendcomp.googleanalytics.Util
									.convertToDatatype(
											tGoogleAnalyticsInput_1_value_7,
											"Integer", "en");
						} catch (Exception e) {
							throw new Exception(
									"Convert field: row1.goalCompletionsAll value=["
											+ tGoogleAnalyticsInput_1_value_7
											+ "] countLines="
											+ countLines_tGoogleAnalyticsInput_1
											+ " failed:" + e.getMessage(), e);
						}
					}
					// fill schema field goalConversionRateAll
					String tGoogleAnalyticsInput_1_value_8 = dataset_tGoogleAnalyticsInput_1
							.get(8);
					if (tGoogleAnalyticsInput_1_value_8 != null) {
						try {
							row1.goalConversionRateAll = (java.lang.Float) de.cimt.talendcomp.googleanalytics.Util
									.convertToDatatype(
											tGoogleAnalyticsInput_1_value_8,
											"Float", "en");
						} catch (Exception e) {
							throw new Exception(
									"Convert field: row1.goalConversionRateAll value=["
											+ tGoogleAnalyticsInput_1_value_8
											+ "] countLines="
											+ countLines_tGoogleAnalyticsInput_1
											+ " failed:" + e.getMessage(), e);
						}
					}
					// fill schema field visitBounceRate
					String tGoogleAnalyticsInput_1_value_9 = dataset_tGoogleAnalyticsInput_1
							.get(9);
					if (tGoogleAnalyticsInput_1_value_9 != null) {
						try {
							row1.visitBounceRate = (java.lang.Float) de.cimt.talendcomp.googleanalytics.Util
									.convertToDatatype(
											tGoogleAnalyticsInput_1_value_9,
											"Float", "en");
						} catch (Exception e) {
							throw new Exception(
									"Convert field: row1.visitBounceRate value=["
											+ tGoogleAnalyticsInput_1_value_9
											+ "] countLines="
											+ countLines_tGoogleAnalyticsInput_1
											+ " failed:" + e.getMessage(), e);
						}
					}
					// fill schema field avgTimeOnSite
					String tGoogleAnalyticsInput_1_value_10 = dataset_tGoogleAnalyticsInput_1
							.get(10);
					if (tGoogleAnalyticsInput_1_value_10 != null) {
						try {
							row1.avgTimeOnSite = (java.lang.Integer) de.cimt.talendcomp.googleanalytics.Util
									.convertToDatatype(
											tGoogleAnalyticsInput_1_value_10,
											"Integer", "en");
						} catch (Exception e) {
							throw new Exception(
									"Convert field: row1.avgTimeOnSite value=["
											+ tGoogleAnalyticsInput_1_value_10
											+ "] countLines="
											+ countLines_tGoogleAnalyticsInput_1
											+ " failed:" + e.getMessage(), e);
						}
					}
					// fill schema field pageviewsPerVisit
					String tGoogleAnalyticsInput_1_value_11 = dataset_tGoogleAnalyticsInput_1
							.get(11);
					if (tGoogleAnalyticsInput_1_value_11 != null) {
						try {
							row1.pageviewsPerVisit = (java.lang.Integer) de.cimt.talendcomp.googleanalytics.Util
									.convertToDatatype(
											tGoogleAnalyticsInput_1_value_11,
											"Integer", "en");
						} catch (Exception e) {
							throw new Exception(
									"Convert field: row1.pageviewsPerVisit value=["
											+ tGoogleAnalyticsInput_1_value_11
											+ "] countLines="
											+ countLines_tGoogleAnalyticsInput_1
											+ " failed:" + e.getMessage(), e);
						}
					}

					/**
					 * [tGoogleAnalyticsInput_1 begin ] stop
					 */
					/**
					 * [tGoogleAnalyticsInput_1 main ] start
					 */

					currentComponent = "tGoogleAnalyticsInput_1";

					tos_count_tGoogleAnalyticsInput_1++;

					/**
					 * [tGoogleAnalyticsInput_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;
						Var.medium = islabs_ga_common.IfNull(row1.medium) != null ? row1.medium
								: "";// ###############################
						// ###############################
						// # Output tables

						out = null;

						// # Output table : 'out'
						out_tmp.profileid = context.GAPROFILE;
						out_tmp.visitorType = row1.visitorType;
						out_tmp.isMobile = row1.isMobile;
						out_tmp.medium = islabs_ga_common
								.cleanseMediumData(StringHandling
										.DOWNCASE(Var.medium));
						out_tmp.medium_1 = row1.medium;
						out_tmp.source = row1.source;
						out_tmp.date = TalendDate.parseDate("yyyyMMdd",
								row1.date);
						out_tmp.visits = row1.visits;
						out_tmp.visitors = row1.visitors;
						out_tmp.goalCompletionsAll = row1.goalCompletionsAll;
						out_tmp.goalConversionRateAll = row1.goalConversionRateAll;
						out_tmp.visitBounceRate = row1.visitBounceRate;
						out_tmp.avgTimeOnSite = row1.avgTimeOnSite;
						out_tmp.pageviewsPerVisit = row1.pageviewsPerVisit;
						out = out_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "out"
					if (out != null) {

						/**
						 * [tMysqlOutput_1 main ] start
						 */

						currentComponent = "tMysqlOutput_1";

						whetherReject_tMysqlOutput_1 = false;
						pstmt_tMysqlOutput_1.setInt(1, out.profileid);

						if (out.visitorType == null) {
							pstmt_tMysqlOutput_1.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_1.setString(2, out.visitorType);
						}

						if (out.isMobile == null) {
							pstmt_tMysqlOutput_1.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_1.setString(3, out.isMobile);
						}

						if (out.medium == null) {
							pstmt_tMysqlOutput_1.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_1.setString(4, out.medium);
						}

						if (out.medium_1 == null) {
							pstmt_tMysqlOutput_1.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_1.setString(5, out.medium_1);
						}

						if (out.source == null) {
							pstmt_tMysqlOutput_1.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_1.setString(6, out.source);
						}

						if (out.date != null) {
							date_tMysqlOutput_1 = out.date.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmt_tMysqlOutput_1.setString(7,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tMysqlOutput_1.setTimestamp(7,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {
							pstmt_tMysqlOutput_1
									.setNull(7, java.sql.Types.DATE);
						}

						if (out.visits == null) {
							pstmt_tMysqlOutput_1.setNull(8,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tMysqlOutput_1.setInt(8, out.visits);
						}

						if (out.visitors == null) {
							pstmt_tMysqlOutput_1.setNull(9,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tMysqlOutput_1.setInt(9, out.visitors);
						}

						if (out.goalCompletionsAll == null) {
							pstmt_tMysqlOutput_1.setNull(10,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tMysqlOutput_1.setInt(10,
									out.goalCompletionsAll);
						}

						if (out.goalConversionRateAll == null) {
							pstmt_tMysqlOutput_1.setNull(11,
									java.sql.Types.FLOAT);
						} else {
							pstmt_tMysqlOutput_1.setFloat(11,
									out.goalConversionRateAll);
						}

						if (out.visitBounceRate == null) {
							pstmt_tMysqlOutput_1.setNull(12,
									java.sql.Types.FLOAT);
						} else {
							pstmt_tMysqlOutput_1.setFloat(12,
									out.visitBounceRate);
						}

						if (out.avgTimeOnSite == null) {
							pstmt_tMysqlOutput_1.setNull(13,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tMysqlOutput_1.setInt(13, out.avgTimeOnSite);
						}

						if (out.pageviewsPerVisit == null) {
							pstmt_tMysqlOutput_1.setNull(14,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tMysqlOutput_1.setInt(14,
									out.pageviewsPerVisit);
						}

						pstmt_tMysqlOutput_1.addBatch();
						nb_line_tMysqlOutput_1++;

						batchSizeCounter_tMysqlOutput_1++;

						if (batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
							try {
								int countSum_tMysqlOutput_1 = 0;
								for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
										.executeBatch()) {
									countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
											: countEach_tMysqlOutput_1);
								}

								insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

							} catch (java.sql.BatchUpdateException e) {

								throw (e);

							}

							batchSizeCounter_tMysqlOutput_1 = 0;
						}

						tos_count_tMysqlOutput_1++;

						/**
						 * [tMysqlOutput_1 main ] stop
						 */

					} // End of branch "out"

					/**
					 * [tGoogleAnalyticsInput_1 end ] start
					 */

					currentComponent = "tGoogleAnalyticsInput_1";

					countLines_tGoogleAnalyticsInput_1++;
				} // close while from output connection of
					// tGoogleAnalyticsInput_1
				globalMap.put("tGoogleAnalyticsInput_1_NB_LINE",
						countLines_tGoogleAnalyticsInput_1);
				globalMap.put("tGoogleAnalyticsInput_1_TOTAL_AFFECTED_ROWS",
						tGoogleAnalyticsInput_1.getTotalAffectedRows());
				globalMap.put("tGoogleAnalyticsInput_1_CONTAINS_SAMPLED_DATA",
						tGoogleAnalyticsInput_1.containsSampledData());

				ok_Hash.put("tGoogleAnalyticsInput_1", true);
				end_Hash.put("tGoogleAnalyticsInput_1",
						System.currentTimeMillis());

				/**
				 * [tGoogleAnalyticsInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				try {
					if (batchSizeCounter_tMysqlOutput_1 != 0) {
						int countSum_tMysqlOutput_1 = 0;
						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: countEach_tMysqlOutput_1);
						}

						insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				batchSizeCounter_tMysqlOutput_1 = 0;

				try {
					if (pstmt_tMysqlOutput_1 != null) {
						int countSum_tMysqlOutput_1 = 0;
						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: countEach_tMysqlOutput_1);
						}

						insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tGoogleAnalyticsInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tGoogleAnalyticsInput_1_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRollback_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRollback_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRollback_1 begin ] start
				 */

				ok_Hash.put("tMysqlRollback_1", false);
				start_Hash.put("tMysqlRollback_1", System.currentTimeMillis());
				currentComponent = "tMysqlRollback_1";

				int tos_count_tMysqlRollback_1 = 0;

				/**
				 * [tMysqlRollback_1 begin ] stop
				 */
				/**
				 * [tMysqlRollback_1 main ] start
				 */

				currentComponent = "tMysqlRollback_1";

				java.sql.Connection conn_tMysqlRollback_1 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				if (null == conn_tMysqlRollback_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlRollback_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tMysqlRollback_1 != null) {
						if (dataSources_tMysqlRollback_1.get("") != null) {
							conn_tMysqlRollback_1 = dataSources_tMysqlRollback_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tMysqlRollback_1 != null
						&& !conn_tMysqlRollback_1.isClosed()) {
					conn_tMysqlRollback_1.rollback();
				}

				tos_count_tMysqlRollback_1++;

				/**
				 * [tMysqlRollback_1 main ] stop
				 */
				/**
				 * [tMysqlRollback_1 end ] start
				 */

				currentComponent = "tMysqlRollback_1";

				ok_Hash.put("tMysqlRollback_1", true);
				end_Hash.put("tMysqlRollback_1", System.currentTimeMillis());

				/**
				 * [tMysqlRollback_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlRollback_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlRow_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tMysqlRollback_1_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_3 begin ] start
				 */

				ok_Hash.put("tMysqlRow_3", false);
				start_Hash.put("tMysqlRow_3", System.currentTimeMillis());
				currentComponent = "tMysqlRow_3";

				int tos_count_tMysqlRow_3 = 0;

				java.sql.Connection conn_tMysqlRow_3 = null;
				conn_tMysqlRow_3 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");
				if (null == conn_tMysqlRow_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlRow_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tMysqlRow_3 = dataSources_tMysqlRow_3.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tMysqlRow_3 = conn_tMysqlRow_3
						.createStatement();
				String query_tMysqlRow_3 = "";
				boolean whetherReject_tMysqlRow_3 = false;

				/**
				 * [tMysqlRow_3 begin ] stop
				 */
				/**
				 * [tMysqlRow_3 main ] start
				 */

				currentComponent = "tMysqlRow_3";

				query_tMysqlRow_3 = "DELETE FROM  clientdata_ga_raw  WHERE profileid= "
						+ context.GAPROFILE;
				whetherReject_tMysqlRow_3 = false;

				globalMap.put("tMysqlRow_3_QUERY", query_tMysqlRow_3);
				try {
					stmt_tMysqlRow_3.execute(query_tMysqlRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_3 = true;
					throw (e);
				}

				tos_count_tMysqlRow_3++;

				/**
				 * [tMysqlRow_3 main ] stop
				 */
				/**
				 * [tMysqlRow_3 end ] start
				 */

				currentComponent = "tMysqlRow_3";

				stmt_tMysqlRow_3.close();

				ok_Hash.put("tMysqlRow_3", true);
				end_Hash.put("tMysqlRow_3", System.currentTimeMillis());

				/**
				 * [tMysqlRow_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tMysqlRow_3_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_1 begin ] start
				 */

				ok_Hash.put("tMysqlRow_1", false);
				start_Hash.put("tMysqlRow_1", System.currentTimeMillis());
				currentComponent = "tMysqlRow_1";

				int tos_count_tMysqlRow_1 = 0;

				java.sql.Connection conn_tMysqlRow_1 = null;
				conn_tMysqlRow_1 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");
				if (null == conn_tMysqlRow_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlRow_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tMysqlRow_1 = dataSources_tMysqlRow_1.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tMysqlRow_1 = conn_tMysqlRow_1
						.createStatement();
				String query_tMysqlRow_1 = "";
				boolean whetherReject_tMysqlRow_1 = false;

				/**
				 * [tMysqlRow_1 begin ] stop
				 */
				/**
				 * [tMysqlRow_1 main ] start
				 */

				currentComponent = "tMysqlRow_1";

				query_tMysqlRow_1 = "UPDATE initial_jobs_ga SET status='Complete'  WHERE jobid="
						+ context.JOB_ID
						+ " and profileid= "
						+ context.PROFILE_ID
						+ " and gaprofileid= "
						+ context.GAPROFILE;
				whetherReject_tMysqlRow_1 = false;

				globalMap.put("tMysqlRow_1_QUERY", query_tMysqlRow_1);
				try {
					stmt_tMysqlRow_1.execute(query_tMysqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_1 = true;
					throw (e);
				}

				if (!whetherReject_tMysqlRow_1) {
				}

				tos_count_tMysqlRow_1++;

				/**
				 * [tMysqlRow_1 main ] stop
				 */
				/**
				 * [tMysqlRow_1 end ] start
				 */

				currentComponent = "tMysqlRow_1";

				stmt_tMysqlRow_1.close();

				ok_Hash.put("tMysqlRow_1", true);
				end_Hash.put("tMysqlRow_1", System.currentTimeMillis());

				tMysqlCommit_1Process(globalMap);

				/**
				 * [tMysqlRow_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlRow_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 1);
	}

	public void tMysqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlCommit_1 begin ] start
				 */

				ok_Hash.put("tMysqlCommit_1", false);
				start_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
				currentComponent = "tMysqlCommit_1";

				int tos_count_tMysqlCommit_1 = 0;

				/**
				 * [tMysqlCommit_1 begin ] stop
				 */
				/**
				 * [tMysqlCommit_1 main ] start
				 */

				currentComponent = "tMysqlCommit_1";

				java.sql.Connection conn_tMysqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				if (null == conn_tMysqlCommit_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlCommit_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tMysqlCommit_1 != null) {
						if (dataSources_tMysqlCommit_1.get("") != null) {
							conn_tMysqlCommit_1 = dataSources_tMysqlCommit_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tMysqlCommit_1 != null
						&& !conn_tMysqlCommit_1.isClosed()) {
					conn_tMysqlCommit_1.commit();
				}

				tos_count_tMysqlCommit_1++;

				/**
				 * [tMysqlCommit_1 main ] stop
				 */
				/**
				 * [tMysqlCommit_1 end ] start
				 */

				currentComponent = "tMysqlCommit_1";

				ok_Hash.put("tMysqlCommit_1", true);
				end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

				/**
				 * [tMysqlCommit_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tMysqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());
				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */
				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("DB_HOST", context.DB_HOST);
				parentContextMap_tRunJob_1.put("DB_PORT", context.DB_PORT);
				parentContextMap_tRunJob_1.put("DB_SCHEMA", context.DB_SCHEMA);
				parentContextMap_tRunJob_1.put("DB_USERNAME",
						context.DB_USERNAME);
				parentContextMap_tRunJob_1.put("DB_PASSWORD",
						context.DB_PASSWORD);
				parentContextMap_tRunJob_1.put("DB_DBNAME", context.DB_DBNAME);
				parentContextMap_tRunJob_1.put("LOG_DIR_PATH",
						context.LOG_DIR_PATH);
				parentContextMap_tRunJob_1.put("CURRENT_DATE",
						context.CURRENT_DATE);
				parentContextMap_tRunJob_1
						.put("START_DATE", context.START_DATE);
				parentContextMap_tRunJob_1.put("END_DATE", context.END_DATE);
				parentContextMap_tRunJob_1.put("LAST_N_DAYS",
						context.LAST_N_DAYS);
				parentContextMap_tRunJob_1.put("SERVICE_ACCOUNT",
						context.SERVICE_ACCOUNT);
				parentContextMap_tRunJob_1.put("KEY_FILE", context.KEY_FILE);
				parentContextMap_tRunJob_1
						.put("PROFILE_ID", context.PROFILE_ID);
				parentContextMap_tRunJob_1.put("JOB_ID", context.JOB_ID);
				parentContextMap_tRunJob_1.put("GAPROFILE", context.GAPROFILE);
				parentContextMap_tRunJob_1.put("SMTP_PORT", context.SMTP_PORT);
				parentContextMap_tRunJob_1.put("SMTP_PASSWORD",
						context.SMTP_PASSWORD);
				parentContextMap_tRunJob_1.put("SMTP_USERNAME",
						context.SMTP_USERNAME);
				parentContextMap_tRunJob_1.put("SMTP_SERVER",
						context.SMTP_SERVER);

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = context.PROFILE_ID;
				paraList_tRunJob_1.add("--context_param PROFILE_ID="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("PROFILE_ID", obj_tRunJob_1);
				obj_tRunJob_1 = context.GAPROFILE;
				paraList_tRunJob_1.add("--context_param GAPROFILE="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("GAPROFILE", obj_tRunJob_1);
				islabs_mvmetrics.email_user_after_initial_load_0_1.email_user_after_initial_load childJob_tRunJob_1 = new islabs_mvmetrics.email_user_after_initial_load_0_1.email_user_after_initial_load();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}
				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));
				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */
				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public static class exceptionStruct implements
			routines.system.IPersistableRow<exceptionStruct> {
		final static byte[] commonByteArrayLock_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[0];
		static byte[] commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data.length) {
					if (length < 1024
							&& commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data.length == 0) {
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[1024];
					} else {
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data,
						0, length);
				strReturn = new String(
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ISLABS_MVMETRICS_ga_populate_initial_client_data) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.job = readString(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",job=" + job);
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(exceptionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[0];
		static byte[] commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data.length) {
					if (length < 1024
							&& commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data.length == 0) {
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[1024];
					} else {
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data,
						0, length);
				strReturn = new String(
						commonByteArray_ISLABS_MVMETRICS_ga_populate_initial_client_data,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ISLABS_MVMETRICS_ga_populate_initial_client_data) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				exceptionStruct exception = new exceptionStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.LOG_DIR_PATH + "populate_initial_data_"
								+ context.CURRENT_DATE + ".log"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;
				try {
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());
					currentComponent = "tMap_2";

					int tos_count_tMap_2 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_2__Struct {
					}
					Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					exceptionStruct exception_tmp = new exceptionStruct();
					// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 begin ] start
					 */

					ok_Hash.put("tLogCatcher_1", false);
					start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
					currentComponent = "tLogCatcher_1";

					int tos_count_tLogCatcher_1 = 0;

					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
							.getMessages()) {
						row3.type = lcm.getType();
						row3.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row3.priority = lcm.getPriority();
						row3.message = lcm.getMessage();
						row3.code = lcm.getCode();

						row3.moment = java.util.Calendar.getInstance()
								.getTime();

						row3.pid = pid;
						row3.root_pid = rootPid;
						row3.father_pid = fatherPid;

						row3.project = projectName;
						row3.job = jobName;
						row3.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */
						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							exception = null;

							// # Output table : 'exception'
							exception_tmp.moment = row3.moment;
							exception_tmp.job = row3.job;
							exception_tmp.message = row3.message;
							exception = exception_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "exception"
						if (exception != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

							if (exception.moment != null) {

								sb_tFileOutputDelimited_1.append(

								FormatterUtils.format_Date(exception.moment,
										"yyyy-MM-dd HH:mm:ss")

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (exception.job != null) {

								sb_tFileOutputDelimited_1.append(

								exception.job

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);

							if (exception.message != null) {

								sb_tFileOutputDelimited_1.append(

								exception.message

								);

							}

							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

						} // End of branch "exception"

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}

					ok_Hash.put("tLogCatcher_1", true);
					end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

					/**
					 * [tLogCatcher_1 end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLogCatcher_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_2 begin ] start
				 */

				ok_Hash.put("tMysqlRow_2", false);
				start_Hash.put("tMysqlRow_2", System.currentTimeMillis());
				currentComponent = "tMysqlRow_2";

				int tos_count_tMysqlRow_2 = 0;

				java.sql.Connection conn_tMysqlRow_2 = null;
				conn_tMysqlRow_2 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");
				if (null == conn_tMysqlRow_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlRow_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tMysqlRow_2 = dataSources_tMysqlRow_2.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tMysqlRow_2 = conn_tMysqlRow_2
						.createStatement();
				String query_tMysqlRow_2 = "";
				boolean whetherReject_tMysqlRow_2 = false;

				/**
				 * [tMysqlRow_2 begin ] stop
				 */
				/**
				 * [tMysqlRow_2 main ] start
				 */

				currentComponent = "tMysqlRow_2";

				query_tMysqlRow_2 = "UPDATE initial_jobs_ga SET status='Failed'  WHERE jobid="
						+ context.JOB_ID
						+ " and profileid= "
						+ context.PROFILE_ID
						+ " and gaprofileid= "
						+ context.GAPROFILE;
				whetherReject_tMysqlRow_2 = false;

				globalMap.put("tMysqlRow_2_QUERY", query_tMysqlRow_2);
				try {
					stmt_tMysqlRow_2.execute(query_tMysqlRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_2 = true;
					throw (e);
				}

				if (!whetherReject_tMysqlRow_2) {
				}

				tos_count_tMysqlRow_2++;

				/**
				 * [tMysqlRow_2 main ] stop
				 */
				/**
				 * [tMysqlRow_2 end ] start
				 */

				currentComponent = "tMysqlRow_2";

				stmt_tMysqlRow_2.close();

				ok_Hash.put("tMysqlRow_2", true);
				end_Hash.put("tMysqlRow_2", System.currentTimeMillis());

				tMysqlCommit_2Process(globalMap);

				/**
				 * [tMysqlRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tMysqlRow_2_SUBPROCESS_STATE", 1);
	}

	public void tMysqlCommit_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlCommit_2 begin ] start
				 */

				ok_Hash.put("tMysqlCommit_2", false);
				start_Hash.put("tMysqlCommit_2", System.currentTimeMillis());
				currentComponent = "tMysqlCommit_2";

				int tos_count_tMysqlCommit_2 = 0;

				/**
				 * [tMysqlCommit_2 begin ] stop
				 */
				/**
				 * [tMysqlCommit_2 main ] start
				 */

				currentComponent = "tMysqlCommit_2";

				java.sql.Connection conn_tMysqlCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				if (null == conn_tMysqlCommit_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlCommit_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tMysqlCommit_2 != null) {
						if (dataSources_tMysqlCommit_2.get("") != null) {
							conn_tMysqlCommit_2 = dataSources_tMysqlCommit_2
									.get("").getConnection();
						}
					}
				}

				if (conn_tMysqlCommit_2 != null
						&& !conn_tMysqlCommit_2.isClosed()) {
					conn_tMysqlCommit_2.commit();
				}

				tos_count_tMysqlCommit_2++;

				/**
				 * [tMysqlCommit_2 main ] stop
				 */
				/**
				 * [tMysqlCommit_2 end ] start
				 */

				currentComponent = "tMysqlCommit_2";

				ok_Hash.put("tMysqlCommit_2", true);
				end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());

				/**
				 * [tMysqlCommit_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tMysqlCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());
				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */
				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */
				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				Date currentDate = TalendDate.getCurrentDate();
				String enddate = TalendDate.formatDate("yyyy-MM-dd",
						TalendDate.addDate(currentDate, -2, "dd"));
				String startdate = TalendDate.formatDate("yyyy-MM-dd",
						TalendDate.getFirstDayOfMonth(TalendDate.addDate(
								currentDate, 0 - context.LAST_N_DAYS, "dd")));

				context.CURRENT_DATE = TalendDate.getDate("yyyyMMddHHmmss");
				context.START_DATE = startdate;
				context.END_DATE = enddate;

				System.out.println("Populating Data for GA Profile : "
						+ context.GAPROFILE);
				System.out.println("Start Date is : " + startdate);
				System.out.println("End Date is : " + enddate);

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ga_populate_initial_client_data ga_populate_initial_client_dataClass = new ga_populate_initial_client_data();

		int exitCode = ga_populate_initial_client_dataClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ga_populate_initial_client_data.class
					.getClassLoader().getResourceAsStream(
							"islabs_mvmetrics/ga_populate_initial_client_data_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.DB_HOST = (String) context.getProperty("DB_HOST");
			context.DB_PORT = (String) context.getProperty("DB_PORT");
			context.DB_SCHEMA = (String) context.getProperty("DB_SCHEMA");
			context.DB_USERNAME = (String) context.getProperty("DB_USERNAME");
			context.DB_PASSWORD = (String) context.getProperty("DB_PASSWORD");
			context.DB_DBNAME = (String) context.getProperty("DB_DBNAME");
			context.LOG_DIR_PATH = (String) context.getProperty("LOG_DIR_PATH");
			context.CURRENT_DATE = (String) context.getProperty("CURRENT_DATE");
			context.START_DATE = (String) context.getProperty("START_DATE");
			context.END_DATE = (String) context.getProperty("END_DATE");
			try {
				context.LAST_N_DAYS = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("LAST_N_DAYS"));
			} catch (NumberFormatException e) {
				context.LAST_N_DAYS = null;
			}
			context.SERVICE_ACCOUNT = (String) context
					.getProperty("SERVICE_ACCOUNT");
			context.KEY_FILE = (String) context.getProperty("KEY_FILE");
			try {
				context.PROFILE_ID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("PROFILE_ID"));
			} catch (NumberFormatException e) {
				context.PROFILE_ID = null;
			}
			try {
				context.JOB_ID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("JOB_ID"));
			} catch (NumberFormatException e) {
				context.JOB_ID = null;
			}
			try {
				context.GAPROFILE = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("GAPROFILE"));
			} catch (NumberFormatException e) {
				context.GAPROFILE = null;
			}
			context.SMTP_PORT = (String) context.getProperty("SMTP_PORT");
			context.SMTP_PASSWORD = (String) context
					.getProperty("SMTP_PASSWORD");
			context.SMTP_USERNAME = (String) context
					.getProperty("SMTP_USERNAME");
			context.SMTP_SERVER = (String) context.getProperty("SMTP_SERVER");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("DB_HOST")) {
				context.DB_HOST = (String) parentContextMap.get("DB_HOST");
			}
			if (parentContextMap.containsKey("DB_PORT")) {
				context.DB_PORT = (String) parentContextMap.get("DB_PORT");
			}
			if (parentContextMap.containsKey("DB_SCHEMA")) {
				context.DB_SCHEMA = (String) parentContextMap.get("DB_SCHEMA");
			}
			if (parentContextMap.containsKey("DB_USERNAME")) {
				context.DB_USERNAME = (String) parentContextMap
						.get("DB_USERNAME");
			}
			if (parentContextMap.containsKey("DB_PASSWORD")) {
				context.DB_PASSWORD = (String) parentContextMap
						.get("DB_PASSWORD");
			}
			if (parentContextMap.containsKey("DB_DBNAME")) {
				context.DB_DBNAME = (String) parentContextMap.get("DB_DBNAME");
			}
			if (parentContextMap.containsKey("LOG_DIR_PATH")) {
				context.LOG_DIR_PATH = (String) parentContextMap
						.get("LOG_DIR_PATH");
			}
			if (parentContextMap.containsKey("CURRENT_DATE")) {
				context.CURRENT_DATE = (String) parentContextMap
						.get("CURRENT_DATE");
			}
			if (parentContextMap.containsKey("START_DATE")) {
				context.START_DATE = (String) parentContextMap
						.get("START_DATE");
			}
			if (parentContextMap.containsKey("END_DATE")) {
				context.END_DATE = (String) parentContextMap.get("END_DATE");
			}
			if (parentContextMap.containsKey("LAST_N_DAYS")) {
				context.LAST_N_DAYS = (Integer) parentContextMap
						.get("LAST_N_DAYS");
			}
			if (parentContextMap.containsKey("SERVICE_ACCOUNT")) {
				context.SERVICE_ACCOUNT = (String) parentContextMap
						.get("SERVICE_ACCOUNT");
			}
			if (parentContextMap.containsKey("KEY_FILE")) {
				context.KEY_FILE = (String) parentContextMap.get("KEY_FILE");
			}
			if (parentContextMap.containsKey("PROFILE_ID")) {
				context.PROFILE_ID = (Integer) parentContextMap
						.get("PROFILE_ID");
			}
			if (parentContextMap.containsKey("JOB_ID")) {
				context.JOB_ID = (Integer) parentContextMap.get("JOB_ID");
			}
			if (parentContextMap.containsKey("GAPROFILE")) {
				context.GAPROFILE = (Integer) parentContextMap.get("GAPROFILE");
			}
			if (parentContextMap.containsKey("SMTP_PORT")) {
				context.SMTP_PORT = (String) parentContextMap.get("SMTP_PORT");
			}
			if (parentContextMap.containsKey("SMTP_PASSWORD")) {
				context.SMTP_PASSWORD = (String) parentContextMap
						.get("SMTP_PASSWORD");
			}
			if (parentContextMap.containsKey("SMTP_USERNAME")) {
				context.SMTP_USERNAME = (String) parentContextMap
						.get("SMTP_USERNAME");
			}
			if (parentContextMap.containsKey("SMTP_SERVER")) {
				context.SMTP_SERVER = (String) parentContextMap
						.get("SMTP_SERVER");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {

			e_tPrejob_1.printStackTrace();
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlConnection_1) {

			e_tMysqlConnection_1.printStackTrace();
			globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : ga_populate_initial_client_data");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 129262 characters generated by Talend Open Studio for Data Integration on the
 * 12 August 2013 16:34:17 IST
 ************************************************************************************************/
