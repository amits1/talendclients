package routines;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.apache.commons.codec.binary.Base64;
import java.util.Date;
import java.util.TimeZone;
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class COMMON {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
	public static String decodeBase64(String message)
	{
		byte[] decoded = Base64.decodeBase64(message.getBytes());
		return (new String(decoded));
	}
	public static boolean isNumeric(String str)
	{
	  return str.matches("-?\\d+(\\.\\d+)?");  //match a number with optional '-' and decimal.
	}
	
	public static String Unix2String(String str,String timeZoneOffset)
	{
		//SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss a z");
		SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");
		String prepare_tz = timeZoneOffset.contains("-")?"GMT"+timeZoneOffset:timeZoneOffset.contains("+")?"GMT"+timeZoneOffset:"GMT"+"+"+timeZoneOffset;
		TimeZone var_TimeZone = TimeZone.getTimeZone(TimeZone.getTimeZone(prepare_tz).getID());
		sdf.setTimeZone(var_TimeZone);
		Date dt=new Date(Long.parseLong((str)));
		String date_c = sdf.format(dt);
		return date_c;
	
	}
	public static String prepareString(String str)
	{
		return (Relational.ISNULL(str)?"":str.equals("undefined")?"":str.equals("null")?"":str.equals("(not set)")?"":str);
	}
	public static String convertDateFormat(String dateString,String sourceDateFormat,String targetDateFormat)
	{
		SimpleDateFormat sdf_source = new SimpleDateFormat(sourceDateFormat);
		SimpleDateFormat sdf_target = new SimpleDateFormat(targetDateFormat);
		String var_Date = "";
		try{
			var_Date = sdf_target.format(sdf_source.parse(dateString));			
		}
		catch(ParseException e)
		{
			System.out.println("Source Format not correct");
		}
		return var_Date;
	}
	public static String removeQuotesfromString(String str)
	{
		String var_remove_single_quotes = str.replaceAll("'", "");
		String var_remove_quotes = var_remove_single_quotes.replaceAll("\"", "");
		return var_remove_quotes;
	}
   
}
